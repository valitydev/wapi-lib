[
    {kernel, [
        {log_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => {file, "/var/log/wapi-v0/console.json"},
                    sync_mode_qlen => 20
                },
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {dmt_client, [
        % milliseconds
        {cache_update_interval, 5000},
        {max_cache_size, #{
            elements => 20,
            % 50Mb
            memory => 52428800
        }},
        {woody_event_handlers, [
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000
                    }
                }
            }}
        ]},
        {service_urls, #{
            'Repository' => <<"http://dominant:8022/v1/domain/repository">>,
            'RepositoryClient' => <<"http://dominant:8022/v1/domain/repository_client">>
        }}
    ]},

    %% wapi
    {wapi, [
        {ip, "::"},
        {bouncer_ruleset_id, <<"service/authz/api">>},
        {port, 8080},
        %% To send ASCII text in 5xx replies
        %% {oops_bodies, #{
        %%     500 => "oops_bodies/500_body"
        %% }},
        {realm, <<"external">>},
        {transport, thrift},
        {public_endpoint, <<"http://wapi">>},
        {access_conf, #{
            jwt => #{
                keyset => #{
                    wapi => {pem_file, "var/keys/wapi-v0/private.pem"}
                }
            }
        }},
        {signee, wapi},
        {health_check, #{
            disk => {erl_health, disk, ["/", 99]},
            memory => {erl_health, cg_memory, [99]},
            service => {erl_health, service, [<<"wapi-v0">>]}
        }},
        % milliseconds
        {max_request_deadline, 60000},
        % seconds
        {file_storage_url_lifetime, 60},
        {events_fetch_limit, 50},
        {lechiffre_opts, #{
            encryption_source => {json, {file, <<"path/to/pub.secret">>}},
            decryption_sources => [{json, {file, <<"path/to/priv.secret">>}}]
        }},
        {auth_config, #{
            metadata_mappings => #{
                party_id => <<"dev.vality.party.id">>,
                user_id => <<"dev.vality.user.id">>,
                user_email => <<"dev.vality.user.email">>
            }
        }}
    ]},

    {wapi_woody_client, [
        {service_urls, #{
            webhook_manager => "http://hooker:8022/hook",
            token_storage => "http://cds:8022/v1/token_storage",
            identdoc_storage => "http://cds:8022/v1/identity_document_storage",
            fistful_stat => "http://fistful-magista:8022/stat",
            fistful_wallet => "http://fistful:8022/v1/wallet",
            fistful_identity => "http://fistful:8022/v1/identity",
            fistful_destination => "http://fistful:8022/v1/destination",
            fistful_withdrawal => "http://fistful:8022/v1/withdrawal",
            fistful_w2w_transfer => "http://fistful:8022/v1/w2w_transfer"
        }},
        {service_deadlines, #{
            % millisec
            wallet => 5000
        }},
        {service_retries, #{
            party_management => #{
                % function => retry strategy
                % '_' work as "any"
                % default value is 'finish'
                % for more info look genlib_retry :: strategy()
                % https://github.com/valitydev/genlib/blob/master/src/genlib_retry.erl#L19
                'Get' => {linear, 3, 1000},
                '_' => finish
            }
        }}
    ]},

    {how_are_you, [
        {metrics_publishers, [
            % {hay_statsd_publisher, #{
            %     key_prefix => <<"wapi-v0.">>,
            %     host => "localhost",
            %     port => 8125
            % }}
        ]}
    ]},

    {snowflake, [
        % {machine_id, 42}
    ]},

    {bender_client, [
        {services, #{
            'Bender' => <<"http://bender:8022/v1/bender">>,
            'Generator' => <<"http://bender:8022/v1/generator">>
        }},
        {deadline, 60000}
        %{retries, #{
        %    'GenerateID' => finish,
        %    'GetInternalID' => finish,
        %    '_' => finish
        %}}
    ]},

    {bouncer_client, [
        {service_clients, #{
            bouncer => #{
                url => <<"http://bouncer:8022/">>,
                timeout => 500,
                retries => #{
                    'Judge' => {linear, 1, 100},
                    '_' => finish
                }
            },
            org_management => #{
                url => <<"http://orgmgmt:8022/">>,
                retries => #{
                    'GetUserContext' => {linear, 2, 500},
                    '_' => finish
                }
            }
        }}
    ]},

    {token_keeper_client, [
        {service_client, #{
            url => <<"http://token-keeper:8022/">>,
            timeout => 1000,
            retries => #{
                'GetByToken' => {linear, 3, 100},
                '_' => finish
            }
        }}
    ]},

    {prometheus, [
        {collectors, [default]}
    ]}
].
